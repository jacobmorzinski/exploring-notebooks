#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!pwsh

if ( !(Test-Path Confirmed.csv) ) {
    Invoke-WebRequest -Uri "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" -OutFile Confirmed.csv
}
if ( !(Test-Path Deaths.csv) ) {
    Invoke-WebRequest -Uri "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv" -OutFile Deaths.csv
}
if ( !(Test-Path Recovered.csv) ) {
    Invoke-WebRequest -Uri "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv" -OutFile Recovered.csv
}

#!fsharp

// Add this type extension for now
type System.Collections.Generic.List<'T> with
    member this.GetReverseIndex(_, idx) = this.Count - idx - 1

#!markdown

It needs a little cleaning up

#!fsharp

open System.IO
open System.Text.RegularExpressions

let clean (path: string) =
    let raw = File.ReadAllText(path)
    let regex = Regex("\\\"(.*?)\\\"")
    let cleaned = regex.Replace(raw, fun m -> m.Value.Replace(",", " in "))
    File.WriteAllText(path, cleaned)

clean "Confirmed.csv"
clean "Deaths.csv"
clean "Recovered.csv"

"All cleaned up!"

#!markdown

Now let's load it into a data frame and do some processing.

#!fsharp

#r "nuget: Microsoft.Data.Analysis, 0.20.0"
open Microsoft.Data.Analysis

#!fsharp

let deaths = DataFrame.LoadCsv("Deaths.csv")
let confirmed = DataFrame.LoadCsv("Confirmed.csv")
let recovered = DataFrame.LoadCsv("Recovered.csv")

let displayedValue = display("Processing data")

let offset = 4
let series = ResizeArray<_>()

for i = offset to deaths.Columns.Count - 1 do
    let date = deaths.Columns.[i].Name
    let deathsFiltered = deaths.[deaths.Columns.[i].ElementwiseNotEquals(0)]
    let confirmedFiltered = deaths.[confirmed.Columns.[i].ElementwiseNotEquals(0)]
    let recoveredFiltered = recovered.[recovered.Columns.[i].ElementwiseNotEquals(0)]

    displayedValue.Update(sprintf "processing %s" date)

    let data =
        {|
            Date = date
            DeathSeries =
                {|
                    Latitude = deathsFiltered.["Lat"]
                    Longitude = deathsFiltered.["Long"]
                    Data = deathsFiltered.Columns.[i]
                |}
            ConfirmedSeries =
                {|
                    Latitude = confirmedFiltered.["Lat"]
                    Longitude = confirmedFiltered.["Long"]
                    Data = confirmedFiltered.Columns.[i]
                |}
            RecoveredSeries =
                {|
                    Latitude = recoveredFiltered.["Lat"]
                    Longitude = recoveredFiltered.["Long"]
                    Data = recoveredFiltered.Columns.[i]
                |}
        |}

    series.Add(data)

displayedValue.Update("Done!")

#!fsharp

#r "nuget: XPlot.Plotly, 4.0.6"
#r "nuget: XPlot.Plotly.Interactive, 4.0.6"

open XPlot.Plotly

#!fsharp

let layout date =
    Layout(
        font = Font(color = "rgb(240,240,240)"),
        title = "COVID-19 recoveries (" + date + ")",
        paper_bgcolor = "rgb(60,60,60)",
        geo =
            Geo(
                scope = "world",
                showland = true,
                showcountries = true,
                bgcolor = "rgb(90,90,90)",
                landcolor = "rgb(250,250,250)"))

let confirmedTrace =
    Scattergeo(
        name = "Confirmed",
        mode = "markers",
        geo = "geo",
        lat = series.[120].RecoveredSeries.Latitude,
        lon = series.[120].RecoveredSeries.Longitude,
        text = series.[120].RecoveredSeries.Data.ToString(),
        marker = Marker(symbol = "diamond", color = "#DC7633"))

confirmedTrace
|> Chart.Plot
|> Chart.WithLayout (layout series.[120].Date)
